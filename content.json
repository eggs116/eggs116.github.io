[{"title":"多栏布局（二）--上下栏布局","date":"2018-10-10T07:46:38.000Z","path":"Multi_Column_Layout_tb/","text":"1 上固定，下自适应1.1 absolute 解决方案123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: absolute; top: 0; height: 100px; background: red; &#125; .bottom &#123; position: absolute; top: 100px; bottom: 0; overflow: auto; background: yellowgreen; &#125; /* 查看滚动效果 */ div p&#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt; 1.2 absolute-fixed 解决方案123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: absolute; top: 0; height: 100px; background: red; &#125; .bottom &#123; position: fixed; top: 100px; bottom: 0; overflow: auto; background: yellowgreen; &#125; /* 查看滚动效果 */ div p&#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt; 1.3 fixed-absolute 解决方案123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: fixed; top: 0; height: 100px; background: red; &#125; .bottom &#123; position: absolute; top: 100px; bottom: 0; overflow: auto; background: yellowgreen; &#125; /* 查看滚动效果 */ div p&#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt; 其实就是用定位实现，方案1全是绝对定位absolute，方案2和方案3就是一个是绝对定位absolute另一个是固定定位fixed；后面的下固定，上自适应和上下自适应，中间自适应也是相同的道理。是不是很简单 2 下固定，上自适应2.1 absolute 解决方案123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: absolute; top: 0; bottom: 100px; overflow: auto; background: yellowgreen; &#125; .bottom &#123; position: absolute; bottom: 0; height: 100px; background: red; &#125; /* 查看滚动效果 */ div p&#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt;&lt;/div&gt; 2.2 absolute-fixed 解决方案123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: fixed; top: 0; bottom: 100px; overflow: auto; background: yellowgreen; &#125; .bottom &#123; position: absolute; bottom: 0; height: 100px; background: red; &#125; /* 查看滚动效果 */ div p &#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt;&lt;/div&gt; 2.3 fixed-absolute 解决方案1234567891011121314151617181920212223242526272829303132333435363738&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: absolute; top: 0; bottom: 100px; overflow: auto; background: yellowgreen; &#125; .bottom &#123; position: fixed; bottom: 0; height: 100px; background: red; &#125; /* 查看滚动效果 */ div p &#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"top\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt;&lt;/div&gt; 3 上下固定，中间自适应3.1 absolute 解决方案12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: absolute; top: 0; height: 100px; background: yellow; &#125; .bottom &#123; position: absolute; bottom: 0; height: 100px; background: red; &#125; .center&#123; position: absolute; top: 100px; bottom: 100px; overflow: auto; background: yellowgreen; &#125; /* 查看滚动效果 */ div p &#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt;&lt;/div&gt;&lt;div class=\"center\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt;&lt;/div&gt; 3.2 absolute-fixed 解决方案12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: absolute; top: 0; height: 100px; background: yellow; &#125; .bottom &#123; position: absolute; bottom: 0; height: 100px; background: red; &#125; .center&#123; position: fixed; top: 100px; bottom: 100px; overflow: auto; background: yellowgreen; &#125; /* 查看滚动效果 */ div p &#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt;&lt;/div&gt;&lt;div class=\"center\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt;&lt;/div&gt; 3.3 fixed-absolute 解决方案12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;style&gt; html,body &#123; margin: 0; padding: 0; height: 100%; overflow: hidden; &#125; div &#123; width: 100%; &#125; .top &#123; position: fixed; top: 0; height: 100px; background: yellow; &#125; .bottom &#123; position: fixed; bottom: 0; height: 100px; background: red; &#125; .center&#123; position: absolute; top: 100px; bottom: 100px; overflow: auto; background: yellowgreen; &#125; /* 查看滚动效果 */ div p &#123; height: 300px; line-height: 300px; &#125;&lt;/style&gt;&lt;div class=\"top\"&gt;&lt;/div&gt;&lt;div class=\"center\"&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt;&lt;/div&gt;&lt;div class=\"bottom\"&gt;&lt;/div&gt; 需要注意的一点就是，这种布局，一般都会设置html和body高度100%，并且溢出隐藏overflow:hidden;而自适应的用来放内容的那一部分设置溢出自适应overflow:auto;这样滚动条就会出现在这一部分，而不是整个页面","tags":[{"name":"html","slug":"html","permalink":"http://yyeggs.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yyeggs.com/tags/css/"}]},{"title":"多栏布局（一）-- 左右栏布局","date":"2018-10-03T10:58:47.000Z","path":"Multi_Column_Layout_lr/","text":"1 左固定，右自适应1.1 浮动解决方案123456789101112131415161718192021222324252627282930&lt;style&gt; html,body&#123; margin: 0; padding:0; &#125; div&#123; min-height: 100px; &#125; .left &#123; float: left; width: 300px; background: red; &#125; .right &#123; margin-left: 300px; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 注：上面.right 的 margin-left 属性可以用 overflow:hidden 来替代（让.right 开启 BFC）否则当右侧高度过大时，会出现如下效果： 特点：两栏高度不一致优点：兼容性好缺点：浮动元素过多会导致页面结构复杂，并且要清除浮动，否则会导致页面混乱 1.2 定位解决方案1.2.1 定位解决方案 1123456789101112131415161718192021222324252627282930313233&lt;style&gt; html,body&#123; margin: 0; padding:0; &#125; div&#123; min-height: 100px; &#125; .wrap&#123; position: relative; &#125; .left &#123; position: absolute; width: 300px; background: red; &#125; .right &#123; margin-left: 300px; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;定位解决方案1 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 1.2.2 定位解决方案 212345678910111213141516171819202122232425262728293031323334353637383940&lt;style&gt; html, body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; position: relative; &#125; .left &#123; position: absolute; width: 300px; background: red; &#125; .right &#123; position: absolute; left: 300px; right: 0; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;定位解决方案2 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 特点：两栏高度不一致优点：兼容性好缺点：脱离文档流，增加页面结构的复杂程度 1.3 table 解决方案123456789101112131415161718192021222324252627282930313233343536373839&lt;style&gt; html, body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: table; width: 100%; &#125; .left &#123; display: table-cell; width: 300px; background: red; &#125; .right &#123; display: table-cell; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;table解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 特点：两栏高度一致 1.4 flex 解决方案12345678910111213141516171819202122232425262728293031323334353637&lt;style&gt; html, body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: flex; &#125; .left &#123; width: 300px; background: red; &#125; .right &#123; flex: 1; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;flex解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 特点：两栏高度一致优点：CSS3 新属性，实现简单缺点：兼容性差 1.5 grid 解决方案123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; html, body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: grid; grid-template-columns: 300px auto; &#125; .left &#123; background: red; &#125; .right &#123; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;grid解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 特点：两栏高度一致优点：CSS3新属性，实现简单缺点：兼容性差 2 右固定，左自适应2.1 浮动解决方案123456789101112131415161718192021222324252627282930&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .left &#123; background: yellowgreen; margin-right: 300px; &#125; .right &#123; float: right; width: 300px; background: red; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"right\"&gt;&lt;/div&gt; 注：上面.left 的 margin-right 属性可以用 overflow:hidden 来替代（让.left 开启 BFC） 在页面结构上，必须让固定的元素位于自适应的元素之前，否则若自适应的元素在前，因为其为块级元素，盒模型将会占一整行的宽度，这样固定的元素就会被挤到下面，页面结构就会混乱，如下图；而固定的元素在前，因为其设置了浮动，所以脱离了文档流，且z-index级别比文档流高，所以会压在自适应的元素之上特点：两栏高度不一致优点：兼容性好缺点：浮动元素过多会导致页面结构复杂，并且要清除浮动，否则会导致页面混乱 2.2 定位解决方案2.2.1 定位解决方案 11234567891011121314151617181920212223242526272829303132333435&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; position: relative; &#125; .left &#123; margin-right: 300px; background: yellowgreen; &#125; .right &#123; position: absolute; right: 0; top:0; width: 300px; background: red; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"right\"&gt;&lt;/div&gt; &lt;div class=\"left\"&gt;定位解决方案1 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 注：定位解决方案1中，在页面结构上，固定的右侧栏也必须在自适应的左侧栏之前，理由同上，其左侧栏.left同样没有脱离文档流 2.2.2 定位解决方案 2123456789101112131415161718192021222324252627282930313233343536&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; position: relative; &#125; .left &#123; position: absolute; left: 0; right: 300px;; background: yellowgreen; &#125; .right &#123; position: absolute; right: 0; width: 300px; background: red; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"right\"&gt;&lt;/div&gt; &lt;div class=\"left\"&gt;定位解决方案2 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 特点：两栏高度不一致优点：兼容性好缺点：脱离文档流，增加页面结构的复杂程度 2.3 table 解决方案12345678910111213141516171819202122232425262728293031323334&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: table; width: 100%; &#125; .left &#123; display: table-cell; background: yellowgreen; &#125; .right &#123; display: table-cell; width: 300px; background: red; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt; 特点：两栏高度一致 2.4 flex 解决方案1234567891011121314151617181920212223242526272829303132&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: flex; &#125; .left &#123; flex: 1; background: yellowgreen; &#125; .right &#123; width: 300px; background: red; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt; 特点：两栏高度一致优点：CSS3 新属性，实现简单缺点：兼容性差 2.5 grid 解决方案12345678910111213141516171819202122232425262728293031&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: grid; grid-template-columns: auto 300px; &#125; .left &#123; background: yellowgreen; &#125; .right &#123; background: red; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt; 特点：两栏高度一致优点：CSS3新属性，实现简单缺点：兼容性差 3 左右固定，中间自适应3.1 浮动解决方案12345678910111213141516171819202122232425262728293031323334353637&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .left &#123; float: left; width: 300px; background: yellow; &#125; .right &#123; float: right; width: 300px; background: red; &#125; .center &#123; margin-left: 300px; margin-right: 300px; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt; &lt;div class=\"center\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 注：上面.center 的 margin 属性可以用 overflow:hidden 来替代（让.center 开启 BFC） 在页面结构上，在页面结构上，固定的两侧栏在前，自适应的中间栏在后，原因见上面右固定，左自适应的浮动解决方案特点：三栏高度不一致优点：兼容性好缺点：浮动元素过多会导致页面结构复杂，并且要清除浮动，否则会导致页面混乱 3.2 定位解决方案3.2.1 定位解决方案1123456789101112131415161718192021222324252627282930313233343536373839404142&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; position: relative; &#125; .left &#123; position: absolute; left: 0; width: 300px; background: yellow; &#125; .right &#123; position: absolute; right: 0; width: 300px; background: red; &#125; .center &#123; margin-left: 300px; margin-right: 300px; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt; &lt;div class=\"center\"&gt;定位解决方案1 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 注：定位解决方案1中，在页面结构上，固定的两侧栏在前，自适应的中间栏在后，原因见上面右固定，左自适应的浮动解决方案 3.2.2 定位解决方案212345678910111213141516171819202122232425262728293031323334353637383940414243&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; position: relative; &#125; .left &#123; position: absolute; left: 0; width: 300px; background: yellow; &#125; .right &#123; position: absolute; right: 0; width: 300px; background: red; &#125; .center &#123; position: absolute; left: 300px; right: 300px; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"center\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt; 特点：三栏高度不一致优点：兼容性好缺点：脱离文档流，增加页面结构的复杂程度 3.3 table 解决方案12345678910111213141516171819202122232425262728293031323334353637383940&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: table; width: 100%; &#125; .left &#123; display: table-cell; width: 300px; background: yellow; &#125; .right &#123; display: table-cell; width: 300px; background: red; &#125; .center &#123; display: table-cell; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"center\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt; 特点：三栏高度一致 3.4 flex 解决方案12345678910111213141516171819202122232425262728293031323334353637&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: flex; &#125; .left &#123; width: 300px; background: yellow; &#125; .right &#123; width: 300px; background: red; &#125; .center &#123; flex: 1; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"center\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt; 特点：三栏高度一致优点：CSS3 新属性，实现简单缺点：兼容性差 3.5 grid 解决方案1234567891011121314151617181920212223242526272829303132333435&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; div &#123; min-height: 100px; &#125; .wrap &#123; display: grid; grid-template-columns: 300px auto 300px; &#125; .left &#123; background: yellow; &#125; .right &#123; background: red; &#125; .center &#123; background: yellowgreen; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"left\"&gt;&lt;/div&gt; &lt;div class=\"center\"&gt;浮动解决方案 我宽度自适应我宽度自适应我宽度自适应 &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;p&gt;增加高度&lt;/p&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt;&lt;/div&gt; 特点：三栏高度一致优点：CSS3新属性，实现简单缺点：兼容性差 4 总结其实不管是谁固定，谁自适应，可以看到都是通过浮动、定位、table、flex、grid这5种方法实现的，只要掌握好这5种方法，可以应对以上三种布局方式","tags":[{"name":"html","slug":"html","permalink":"http://yyeggs.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yyeggs.com/tags/css/"}]},{"title":"居中问题（三） -- 水平垂直居中","date":"2018-09-11T12:13:38.000Z","path":"Center_Horizontal_Vertical/","text":"鉴于实际需求，这里只列举了块级元素内的块级元素水平垂直居中，如果你想要实现块级元素内的行内元素或类行内元素居中，请参考前两篇的水平居中和垂直居中的博客 1 水平垂直居中1.1 margin1234567891011121314151617181920212223&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; border: 1px solid transparent; background: paleturquoise; &#125; .in &#123; width: 100px; height: 100px; margin-top: 50px; margin-left: 50px; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：.in的margin-left值为(.wrap的宽度-.in的宽度)/2；.in的margin-top值为(.wrap的高度-.in的高度)/2；值得注意的是我在.wrap上添加了一个border: 1px solid transparent;属性，目的是为了解决边距重叠问题，关于边距重叠问题，我后续也会专门写一篇博客来详细介绍，有兴趣的小伙伴可以继续关注哦！ 优点：最简单的实现方式，兼容各种浏览器缺点：可扩展性低，内盒子的宽高必须固定，且每当改变内外盒子的宽高，margin值都要重新计算 1.2 定位 position1234567891011121314151617181920212223242526&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; position: relative; background: paleturquoise; &#125; .in &#123; width: 100px; height: 100px; position: absolute; top: 50%; left: 50%; margin-top: -50px; margin-left: -50px; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 优点：最常用的实现方式，兼容性好，可以同时实现水平和垂直居中缺点：内盒子的宽高必须固定 1.3 定位 position–margin12345678910111213141516171819202122232425262728&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; position: relative; background: paleturquoise; &#125; .in &#123; /* width: 100px; */ width: fit-content; height: 100px; position: absolute; top: 0; right: 0; bottom: 0; left: 0; margin: auto; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：定位方式的一种，我们都知道当定位的元素同时设置了top、right、bottom和left值时只有top和left起作用，但当加上margin:auto这点睛之笔后，你会发现这四个值都会起作用，而当这四个值都是0时就实现了我们现在的水平垂直居中了，怎么样？神不神奇 优点：兼容性好，可以同时实现水平垂直居中，且宽度无须固定缺点：高度必须固定，否则将占父元素的100% 1.4 定位position结合transform1.4.1 absolute–transform1234567891011121314151617181920212223242526&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; position: relative; background: paleturquoise; &#125; .in &#123; /* width: 100px; */ width: fit-content; /* height: 100px;*/ position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：弥补了1.2中的缺点，内盒子宽高可以不固定，当内盒子宽高固定时，translate()括号中的值为负的内盒子宽/高的二分之一即可，即相当于1.2中的margin-left/top，而不论内盒子宽高是否固定，translate()括号中的值都可以是两个-50%。注：transform方法，当计算结果含小数位时，会导致整个元素变模糊，解决方案是父级元素设置transform-style:preserve-3d;具体关于CSS3的动画属性，我后续也会专门写一篇博客进行介绍，有兴趣的小伙伴，可以一起讨论讨论哦 优点：实现简单，宽高无须固定缺点：transform是CSS3的新属性，所以兼容性比较差 1.4.2 relative–transform12345678910111213141516171819202122232425&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; background: paleturquoise; &#125; .in &#123; /* width: 100px; */ width: fit-content; /* height: 100px;*/ position: relative; top: 50%; left: 50%; transform: translate(-50%,-50%); background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：这个方法与1.4.1极相似，不同之处在于，此法外盒子不定位，直接给内盒子采取相对定位relative，但一般使用率比较低注：transform方法，当计算结果含小数位时，会导致整个元素变模糊，解决方案是父级元素设置transform-style:preserve-3d; 1.5 table-cell123456789101112131415161718192021222324&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; display: table-cell; vertical-align: middle; background: paleturquoise; &#125; .in &#123; /* width: 100px; */ width: fit-content; /* height: 100px;*/ margin: 0 auto; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 优点：实现简单，内盒子宽高无须固定缺点：table-cell会跟浮动、定位等属性相互冲突，并且不能设置margin属性 1.6 flex1.6.1 align-items123456789101112131415161718192021222324&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; display: flex; justify-content: center; align-items: center; background: paleturquoise; &#125; .in &#123; /* width: 100px; */ width: fit-content; /* height: 100px;*/ background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：justify-content:center;意为flex主轴方向对齐方式：居中，而align-items: center;意为交叉轴方向对齐方式：居中。主轴方向flex-direction默认为row即横向，则交叉轴即为纵向，也就是垂直方向关于flex可以参考我的博客 优点：实现简单，内盒子宽高无须固定缺点：flex为CSS3新属性，兼容性差，且flex内的元素float、clear、vertical-align等样式全部失效 1.6.2 align-self123456789101112131415161718192021222324&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; display: flex; justify-content: center; background: paleturquoise; &#125; .in &#123; /* width: 100px; */ width: fit-content; /* height: 100px;*/ align-self: center; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：这个方法跟上一个很相似，唯一不一样的地方就在于上一个方法用align-items属性，而这个方法用的是align-self属性。简单说一下两个属性的区别：align-items属性是容器即外盒子的属性，意为容器内所有元素的交叉轴对齐方式；而align-self属性是内元素属性，意为本元素的交叉轴对齐方式 1.7 calc()12345678910111213141516171819202122&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; border: 1px solid transparent; background: paleturquoise; &#125; .in &#123; width: 100px; height: 100px; margin: calc(50% - 50px) auto; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：前面那个50%取值是父元素高度的50%，后面那个50px取值是本元素的高的一半，其实原理跟1.1的margin是相同的注：不要质疑calc()就是一个CSS3属性，是用来指定长度的，比如可以给元素的width、height、border、margin、padding、font-size等属性设置动态值，但一定要注意calc()括号中的运算符前后一定要有空格！运算符前后一定要有空格！运算符前后一定要有空格！（重要的事情说三遍） 优点：当页面结构复杂无法用其它方式实现水平垂直居中时，你会非常喜欢这个属性的缺点：CSS3新属性，兼容性还不是很好，而且在css中进行计算会降低页面性能 2 总结关于我所了解的水平居中、垂直居中、水平垂直居中的各种方法到这里就介绍完毕了，如果小伙伴们还有其它方法，或者在具体的实践中遇到任何问题，都欢迎大家在评论区积极讨论，我也会一直关注的哦✌","tags":[{"name":"html","slug":"html","permalink":"http://yyeggs.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yyeggs.com/tags/css/"}]},{"title":"居中问题（二） -- 垂直居中","date":"2018-09-01T07:02:16.000Z","path":"Center_Vertical/","text":"1 行内元素内容居中12345678910111213&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; span&#123; padding: 5px 8px; float: left; background: plum; &#125;&lt;/style&gt;&lt;span&gt;请叫我小仙女&lt;/span&gt; 说明：大多数行内元素不能设置宽高，只能由内容撑起，而若要实现上下左右有空隙则需设置padding，但是行内元素的padding只对左、右、下起作用，margin只对左、右起作用，所以对于行内元素若想让上述属性起作用，则需设置浮动或定位，而若要垂直方向居中则设置padding-top=padding-bottom即可 优点：简单、常用，可同时实现水平垂直居中，兼容性好缺点：需要设置浮动或定位来辅助实现 2 块级元素中的行内元素或类行内元素居中2.1 line-height1234567891011121314151617181920&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; line-height: 200px; background: paleturquoise; &#125; span &#123; background: plum; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;span&gt;请叫我小仙女&lt;/span&gt; &lt;img src=\"images/eg_cute.gif\" alt=\"\"&gt;&lt;/div&gt; 说明：外盒子设置line-height=height即可 优点：简单、常用，兼容性好缺点：若需要居中的内容为多行则不适用 2.2 vertical-align12345678910111213141516171819202122&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; display: table-cell; vertical-align: middle; background: paleturquoise; &#125; span &#123; background: plum; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"wrap\"&gt; &lt;span&gt;请叫我小仙女请叫我小仙女请叫我小仙女&lt;/span&gt; &lt;/div&gt; 说明：在没有其它属性辅助的情况下，只有table-cell属性的元素才可以使用vertical-align属性 优点：可同时适用于单行和多行内容缺点：实现条件苛刻 2.3 flex1234567891011121314151617181920&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; display: flex; align-items: center; background: paleturquoise; &#125; span &#123; background: plum; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;span&gt;请叫我小仙女小仙女小仙女小仙女&lt;/span&gt;&lt;/div&gt; 优点：可同时适用于单行和多行内容缺点：CSS3新属性，兼容性差 3 块级元素3.1 margin123456789101112131415161718192021&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; border: 1px solid transparent; background: paleturquoise; &#125; .in &#123; height: 100px; margin-top: 50px; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：.in的margin-top值为(.wrap的高度-.in的高度)/2；值得注意的是我在.wrap上添加了一个border: 1px solid transparent;属性，目的是为了解决边距重叠问题，关于边距重叠问题，我后续也会专门写一篇博客来详细介绍，有兴趣的小伙伴可以继续关注哦！ 优点：最简单的实现方式，兼容各种浏览器缺点：可扩展性低，内盒子的高度必须固定，且每当改变内外盒子的高度，margin-top的值都要重新计算 3.2 定位position1234567891011121314151617181920212223&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; position: relative; background: paleturquoise; &#125; .in &#123; height: 100px; position: absolute; top: 50%; margin-top: -50px; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 优点：最常用的实现方式，兼容性好，可以在此基础上以同样方法添加left和margin-left实现水平垂直居中缺点：内盒子的高度必须固定 3.3 定位position结合transform3.3.1 absolute–transform1234567891011121314151617181920212223&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; position: relative; background: paleturquoise; &#125; .in &#123; /* height: 100px; */ position: absolute; top: 50%; transform: translateY(-50%); background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 注：transform方法，当计算结果含小数位时，会导致整个元素变模糊，解决方案是父级元素设置transform-style:preserve-3d;优点：弥补了3.2中的缺点，内盒子高度可以不固定，当内盒子高度固定时，translateY()括号中的值为负的内盒子高的二分之一即可，即相当于3.2中的margin-top，而不论内盒子高度是否固定，translateY()括号中的值都可以是-50%缺点：transform是CSS3的新属性，所以兼容性比较差 3.3.2 relative–transform12345678910111213141516171819202122&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; background: paleturquoise; &#125; .in &#123; height: 100px; position: relative; top: 50%; transform: translateY(-50%); background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：这个方法与3.3.1极相似，不同之处在于，此法外盒子不定位，直接给内盒子采取相对定位relative，但一般不会这样使用，都是采用上面那种方法注：transform方法，当计算结果含小数位时，会导致整个元素变模糊，解决方案是父级元素设置transform-style:preserve-3d; 3.4 :before结合inline-block结合vertical-align1234567891011121314151617181920212223242526&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; background: paleturquoise; &#125; .wrap::before&#123; content:\"\"; display:inline-block; height:100%; vertical-align:middle; &#125; .in &#123; display: inline-block; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 缺点：实现起来比较麻烦，所以很少用 3.5 flex123456789101112131415161718192021&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; display: flex; align-items: center; background: paleturquoise; &#125; .in &#123; /* height: 100px; */ background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：align-items:center;意为交叉轴方向对齐方式：居中。主轴方向flex-direction默认为row即横向，则交叉轴即为纵向，也就是垂直方向关于flex可以参考我的博客 优点：实现简单，内盒子高度无须固定缺点：flex为CSS3新属性，兼容性差，且flex内的元素float、clear、vertical-align等样式全部失效 3.6 增加节点1234567891011121314151617181920212223&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap &#123; width: 200px; height: 200px; background: paleturquoise; &#125; .hide&#123; height: 50px; &#125; .in &#123; height: 100px; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"hide\"&gt;&lt;/div&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：在内盒子前添加一个元素，并且设置高度为内外盒子高度差的二分之一，宽度默认100%即可,其实这种方法跟3.1原理是相同的，此处.hide的位置即为3.1中margin-top所占据的位置 优点：请原谅我从宏观上看并没有发现此方法的优点，但不代表这种方法没有用，或许在某些复杂或奇怪的页面结构中，其它方法都不适用，只能采用这种方法呢缺点：需要增加元素节点，且内盒子高度必须固定 4 总结关于垂直居中的方法就总结到这里了，如果小伙伴们还有其它方法，或者在具体的实践中遇到任何问题，都欢迎大家在评论区积极讨论，我也会一直关注的哦✌","tags":[{"name":"html","slug":"html","permalink":"http://yyeggs.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yyeggs.com/tags/css/"}]},{"title":"居中问题（一） -- 水平居中","date":"2018-08-16T03:22:40.000Z","path":"Center_Horizontal/","text":"对于行内元素的内容居中，因为行内元素一般都不能设置宽高，而是由内容撑起的，可以设置padding值，所以这里的居中问题考虑的是块级元素内的元素水平居中，而不考虑行内元素内的元素或内容居中 1 行内或类行内元素（比如图片、文本、链接等）居中12345678910111213141516&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; text-align: center; background: paleturquoise; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;span&gt;请叫我小仙女&lt;/span&gt;&lt;/div&gt; 块级父容器设置text-align: center; 2 块级元素居中2.1 margin1234567891011121314151617181920&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; background: paleturquoise; &#125; .in&#123; width: 100px; margin-left: 50px; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 说明：.in的margin-left值为(.wrap的宽度-.in的宽度)/2 优点：最简单的实现方式，兼容各种浏览器缺点：可扩展性低，内盒子的宽度必须固定，且每当改变内外盒子的宽度，margin-left的值都要重新计算 2.2 margin–auto123456789101112131415161718192021&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; background: paleturquoise; &#125; .in&#123; /* width: 100px; */ width: fit-content; margin: 0 auto; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 优点：最简单、常用的实现方式，兼容各种浏览器，并且当内盒子的宽度不固定时（例如上面width:fit-content（宽度收缩到内容））也同样适用缺点：此属性只能实现水平居中，不能像定位属性那样可以同时实现水平垂直居中 2.3 定位position1234567891011121314151617181920212223&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; position: relative; background: paleturquoise; &#125; .in&#123; width: 100px; position: absolute; left: 50%; margin-left: -50px; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 优点：最常用的实现方式，兼容性好，可以在此基础上以同样方法添加top和margin-top实现水平垂直居中缺点：内盒子的宽度必须固定 2.4 定位position结合transform2.4.1 absolute–transform123456789101112131415161718192021222324&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; position: relative; background: paleturquoise; &#125; .in&#123; /* width: 100px; */ width: fit-content; position: absolute; left: 50%; transform: translateX(-50%); background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 注：transform方法，当计算结果含小数位时，会导致整个元素变模糊，解决方案是父级元素设置transform-style:preserve-3d;优点：弥补了2.3中的缺点，内盒子宽度可以不固定，当内盒子宽度固定时，translateX()括号中的值为负的内盒子宽的二分之一即可，即相当于2.3中的margin-left，而不论内盒子宽度是否固定，translateX()括号中的值都可以是-50%缺点：transform是CSS3的新属性，所以兼容性比较差 2.4.2 relative–transform123456789101112131415161718192021222324&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; background: paleturquoise; &#125; .in&#123; /* width: 100px; */ width: fit-content; position: relative; left: 50%; transform: translateX(-50%); background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我仙女&lt;/div&gt;&lt;/div&gt;&lt;div class=\"wrap\"&gt;&lt;/div&gt; 说明：这个方法与2.4.1极相似，不同之处在于，此法外盒子不定位，直接给内盒子采取相对定位relative，但一般不会这样使用，都是采用上面那种方法注：transform方法，当计算结果含小数位时，会导致整个元素变模糊，解决方案是父级元素设置transform-style:preserve-3d; 2.5 table-cell/inline-block2.5.1 table-cell12345678910111213141516171819202122&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; display: table-cell; background: paleturquoise; &#125; .in&#123; /* width: 100px; */ width: fit-content; margin: 0 auto; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 优点：实现简单，内盒子宽度无须固定缺点：table-cell会跟浮动、定位等属性相互冲突，并且不能设置margin属性 2.5.2 inline-block 112345678910111213141516171819202122&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; display: inline-block; background: paleturquoise; &#125; .in&#123; /* width: 100px; */ width: fit-content; margin: 0 auto; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我小仙女&lt;/div&gt;&lt;/div&gt; 2.5.3 inline-block 212345678910111213141516171819202122&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; text-align: center; background: paleturquoise; &#125; .in&#123; /* width: 100px; */ width: fit-content; display: inline-block; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我仙女&lt;/div&gt;&lt;/div&gt; 说明：把内盒子设成行内块元素，使用1中行内元素的居中方式 优点：内盒子宽度无须固定 2.6 flex12345678910111213141516171819202122&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; display: flex; justify-content: center; background: paleturquoise; &#125; .in&#123; /* width: 100px; */ width: fit-content; background: peachpuff; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"in\"&gt;请叫我仙女&lt;/div&gt;&lt;/div&gt; 说明：justify-content:center;意为flex主轴方向对齐方式：居中。主轴方向flex-direction默认为row即横向注：如果内盒子不设高度，外盒子使用flex属性后，会出现如下现象因为外盒子没有设置垂直方向上的对齐方式align-items，而它的默认值是stretch即铺满容器，所以就出现了内盒子高度等于外盒子高度，所以未避免这种情况，可以根据需求设置align-items对齐方式，此处可添加align-items:flex-start;即顶端对齐关于flex可以参考我的博客 优点：实现简单，内盒子宽度无须固定缺点：flex为CSS3新属性，兼容性差，且flex内的元素float、clear、vertical-align等样式全部失效 2.7 增加节点1234567891011121314151617181920212223242526&lt;style&gt; html,body &#123; margin: 0; padding: 0; &#125; .wrap&#123; width: 200px; height: 200px; background: paleturquoise; &#125; .in&#123; width: 100px; float: left; background: peachpuff; &#125; .hide&#123; width: 50px; height: 1px; float: left; &#125;&lt;/style&gt;&lt;div class=\"wrap\"&gt; &lt;div class=\"hide\"&gt;&lt;/div&gt; &lt;div class=\"in\"&gt;请叫我仙女&lt;/div&gt;&lt;/div&gt; 说明：在内盒子前添加一个元素，并且设置宽为内外盒子宽度差的二分之一，高为1px,两个元素都设置float,其实这种方法跟2.1原理是相同的，此处.hide的位置即为2.1中margin-left所占据的位置 优点：请原谅我从宏观上看并没有发现此方法的优点，但不代表这种方法没有用，或许在某些复杂或奇怪的页面结构中，其它方法都不适用，只能采用这种方法呢缺点：需要增加元素节点，并且用到浮动属性增加页面复杂度，且内盒子宽度固定 3 总结关于水平居中的方法就总结到这里了，如果小伙伴们还有其它方法，或者在具体的实践中遇到任何问题，都欢迎大家在评论区积极讨论，我也会一直关注的哦✌","tags":[{"name":"html","slug":"html","permalink":"http://yyeggs.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yyeggs.com/tags/css/"}]}]